import com.tencent.shadow.coding.code_generator.ActivityCodeGenerator
import org.apache.commons.io.IOUtils

import java.util.zip.ZipInputStream

apply plugin: 'com.android.library'


apply from: '../../../../buildScripts/gradle/version.gradle'


android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets{
        main.java.srcDirs += 'build/generated/sources/code-generator'
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
}

/**
 * 解压aar 将jar包提取出来
 */
task buildReleaseSd(dependsOn: ['assembleRelease']) {
    doLast {
        def aarPath = "$project.buildDir.path/outputs/aar/sd-release.aar"
        def zipInputStream = new ZipInputStream(new FileInputStream(new File(aarPath)))
        def zipEntry = null
        while ((zipEntry = zipInputStream.getNextEntry()) != null) {
            def entryName = zipEntry.name
            if (entryName.equals("classes.jar")) {
                def jarFile = new File("${project.buildDir.path}/outputs/ows-${sdkHostVersion}.jar")
                copyJarFile(zipInputStream, jarFile)
                break
            }
        }

        IOUtils.closeQuietly(zipInputStream)
    }
}

def copyJarFile(InputStream inputStream, File jarFile) {
    def fileOutput = new FileOutputStream(jarFile)
    def len = 0
    def data = new byte[1024]
    while ((len = inputStream.read(data)) != -1) {
        fileOutput.write(data, 0, len)
    }
    IOUtils.closeQuietly(inputStream)
    IOUtils.closeQuietly(fileOutput)
}

def generateCode = tasks.register('generateCode') {
    def outputDir = layout.buildDirectory.dir('generated/sources/code-generator')
    outputs.dir(outputDir)
            .withPropertyName('outputDir')
    doLast {
        ActivityCodeGenerator codeGenerator = new ActivityCodeGenerator()
        codeGenerator.generate(outputDir.get().getAsFile())
    }
}

preBuild.dependsOn(generateCode)


