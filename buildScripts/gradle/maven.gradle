task buildSdk() {
    dependsOn gradle.includedBuild('core').task(':gradle-plugin:assemble')
    dependsOn gradle.includedBuild('core').task(':transform-kit:assemble')
    dependsOn gradle.includedBuild('core').task(':transform-kit:testJar')
    dependsOn gradle.includedBuild('core').task(':transform:assemble')

    dependsOn gradle.includedBuild('host-sdk').task(':sd:assembleRelease')
}

apply plugin: 'maven-publish'

static def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}

def gitShortRev() {
    def gitCommit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> gitCommit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return gitCommit
}

def setScm(scm) {
    scm.appendNode('connection', "https://github.com/${System.getenv("GITHUB_ACTOR")}/Shadow.git")

    def commit
    if ("${System.env.CI}".equalsIgnoreCase("true")) {
        commit = System.getenv("GITHUB_SHA")
    } else {
        commit = gitShortRev()
    }
    scm.appendNode('url', "https://github.com/${System.getenv("GITHUB_ACTOR")}/Shadow/commit/$commit")
}

def setGeneratePomFileAndDepends(publicationName) {
    model {
        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
            destination = file("$buildDir/pom/$publicationName-pom.xml")
            dependsOn(buildSdk)
        }
    }
}

def sourceJar(String name, String path) {
    return tasks.create("source${name.capitalize()}Jar", Jar) {
        group = "publishing"
        description = "package ${name} source to jar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDir = file("$path/build/libs/")
        classifier = 'sources'
    }
}

def coreGroupId = 'com.tencent.shadow.core'
def corePath = 'projects/sdk/core'
def sdkHostGroupId = 'mobi.oneway.sd'
def sdkHostPath = 'projects/sdk/host-sdk'

def gradlePluginVersion = "1.0.1"
def sdkHostVersion = "1.0.1"

publishing {
    publications {
        gradlePlugin(MavenPublication) {
            groupId coreGroupId
            artifactId 'gradle-plugin'
            version gradlePluginVersion
            artifact("$corePath/gradle-plugin/build/libs/gradle-plugin.jar")
            artifact sourceJar("gradlePlugin", "$corePath/gradle-plugin")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'com.android.tools.build', 'gradle', build_gradle_version))
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform-kit', gradlePluginVersion))
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform', gradlePluginVersion))
                dependencies.append(getDependencyNode('compile', sdkHostGroupId, 'sd', sdkHostVersion))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }

        transformKit(MavenPublication) {
            groupId coreGroupId
            artifactId 'transform-kit'
            version gradlePluginVersion
            artifact("$corePath/transform-kit/build/libs/transform-kit.jar")
            artifact sourceJar("transformKit", "$corePath/transform-kit")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', kotlin_version))
                dependencies.append(getDependencyNode('compile', 'com.android.tools.build', 'gradle', build_gradle_version))
                dependencies.append(getDependencyNode('compile', 'org.javassist', 'javassist', '3.22.0-GA'))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }

        transform(MavenPublication) {
            groupId coreGroupId
            artifactId 'transform'
            version gradlePluginVersion
            artifact("$corePath/transform/build/libs/transform.jar")
            artifact sourceJar("transform", "$corePath/transform")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform-kit', gradlePluginVersion))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }

        sd(MavenPublication) {
            groupId sdkHostGroupId
            artifactId 'sd'
            version sdkHostVersion
            artifact("$sdkHostPath/sd/build/outputs/aar/sd-release.aar")
            artifact sourceJar("sd", "$sdkHostPath/sd")

            pom.withXml {
                def root = asNode()

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
    }
    repositories {
        def useLocalCredential = false
        Properties properties = new Properties()
        def propertiesFile = project.rootProject.file('local.properties')
        if (propertiesFile.exists()) {
            properties.load(propertiesFile.newDataInputStream())

            if ("${properties.getProperty('gpr.local')}".equalsIgnoreCase('true')) {
                def user = properties.getProperty('gpr.user')
                def key = properties.getProperty('gpr.key')
                maven {
                    name = "GitHubPackages"
                    credentials {
                        username = user
                        password = key
                    }
                    url "https://maven.pkg.github.com/${user}/shadow"
                }

                useLocalCredential = true
            }
        }

        if (!useLocalCredential && "${System.env.CI}".equalsIgnoreCase("true")) {
            maven {
                name = "GitHubPackages"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
                url "https://maven.pkg.github.com/" + "${System.env.GITHUB_REPOSITORY}".toLowerCase()
            }
        } else {
            mavenLocal()
        }
    }
}

setGeneratePomFileAndDepends('gradlePlugin')
setGeneratePomFileAndDepends('transformKit')
setGeneratePomFileAndDepends('transform')
setGeneratePomFileAndDepends('sd')
